#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∏—Å–∫–æ—Ç–µ–∫–∏ –±–µ–∑ GUI.
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞ –∏ –≤–µ–±-API –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞.
–î–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""

import sys
import os
import json
import time
import signal
import socket
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, Response
from flask_cors import CORS
from threading import Thread

from scheduler import DiscoScheduler
from soundcheck import SoundCheck
from soundcheck_v2 import SoundCheckV2
from audio_monitor import AudioMonitor, get_audio_devices_list


def get_exe_dir():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è exe —Ñ–∞–π–ª"""
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    else:
        return os.path.dirname(os.path.abspath(__file__))


def get_local_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å –º–∞—à–∏–Ω—ã."""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        try:
            hostname = socket.gethostname()
            ip = socket.gethostbyname(hostname)
            return ip
        except:
            return "127.0.0.1"


class DiscoServer:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∏—Å–∫–æ—Ç–µ–∫–∏"""
    
    def __init__(self):
        self.config_file = os.path.join(get_exe_dir(), 'scheduler_config.json')
        self.running = True
        
        # –§–ª–∞–≥ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–∞—É–Ω–¥—á–µ–∫–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –¥–∏—Å–∫–æ—Ç–µ–∫–∏
        self.soundcheck_schedule_enabled = False
        self.soundcheck_minutes_before_disco = 30  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç
        self.soundcheck_last_trigger_key = None  # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤ –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∑–∞–ø—É—Å–∫
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    cfg = json.load(f)
                    self.soundcheck_schedule_enabled = bool(cfg.get('soundcheck_schedule_enabled', False))
                    self.soundcheck_minutes_before_disco = int(cfg.get('soundcheck_minutes_before_disco', 30))
        except Exception as e:
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Å–∞—É–Ω–¥—á–µ–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler = DiscoScheduler(config_file=self.config_file, log_callback=self.log)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤—É–∫–∞
        self.audio_monitor = None
        self.init_audio_monitor()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Flask(__name__)
        CORS(self.app)
        self.setup_routes()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å timestamp"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f'[{timestamp}] {message}')
    
    def init_audio_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤—É–∫–∞"""
        try:
            self.audio_monitor = AudioMonitor(config_file=self.config_file)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏
            self.audio_monitor.set_callbacks(
                on_silence_detected=self.on_silence_detected,
                on_sound_restored=self.on_sound_restored,
                on_silence_warning=self.on_silence_warning,
                on_level_updated=self.on_level_updated
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            if self.audio_monitor.monitoring_enabled:
                self.audio_monitor.start_monitoring()
                self.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞ –∑–∞–ø—É—â–µ–Ω")
            else:
                self.log("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤—É–∫–∞: {e}")
    
    def on_silence_detected(self, level):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–∏—à–∏–Ω—ã"""
        self.log(f"üîá –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–∏—à–∏–Ω–∞ (—É—Ä–æ–≤–µ–Ω—å: {level:.6f})")
    
    def on_sound_restored(self, silence_time):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        self.log(f"üîä –ó–≤—É–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {silence_time:.1f}—Å —Ç–∏—à–∏–Ω—ã")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏—Å–∫–æ—Ç–µ–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if self.scheduler.disco_is_active:
            try:
                self.scheduler.telegram_bot.notify_music_restored(silence_time)
            except Exception as e:
                self.log(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')
    
    def on_silence_warning(self, silence_time):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∏—à–∏–Ω–µ"""
        self.log(f"‚ö†Ô∏è –¢–ò–®–ò–ù–ê! {silence_time:.0f}—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏—Å–∫–æ—Ç–µ–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if self.scheduler.disco_is_active:
            try:
                self.scheduler.telegram_bot.notify_music_stopped(silence_time)
            except Exception as e:
                self.log(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')
    
    def on_level_updated(self, level):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞ (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å)"""
        pass
    
    def _save_monitoring_enabled_to_config(self, enabled):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Ñ–∏–≥"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            existing_settings = {}
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    existing_settings = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            existing_settings['monitoring_enabled'] = enabled
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(existing_settings, f, ensure_ascii=False, indent=2)
            
            self.log(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _save_audio_settings_to_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Ñ–∏–≥"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            existing_settings = {}
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    existing_settings = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if self.audio_monitor:
                existing_settings['audio_threshold'] = self.audio_monitor.threshold
                existing_settings['audio_silence_duration'] = self.audio_monitor.silence_duration
                existing_settings['audio_sound_confirmation_duration'] = self.audio_monitor.sound_confirmation_duration
                existing_settings['audio_buffer_size'] = self.audio_monitor.buffer_size
                if self.audio_monitor.device_index is not None:
                    existing_settings['audio_device_index'] = self.audio_monitor.device_index
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(existing_settings, f, ensure_ascii=False, indent=2)
            
            self.log("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _save_soundcheck_schedule_enabled_to_config(self, enabled):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Å–∞—É–Ω–¥—á–µ–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥"""
        try:
            existing_settings = {}
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    existing_settings = json.load(f)
            existing_settings['soundcheck_schedule_enabled'] = bool(enabled)
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(existing_settings, f, ensure_ascii=False, indent=2)
            self.log(f"üíæ –ê–≤—Ç–æ-—Å–∞—É–Ω–¥—á–µ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ-—Å–∞—É–Ω–¥—á–µ–∫–∞: {e}")
    
    def _save_soundcheck_minutes_to_config(self, minutes):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∞—É–Ω–¥—á–µ–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥"""
        try:
            existing_settings = {}
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    existing_settings = json.load(f)
            existing_settings['soundcheck_minutes_before_disco'] = int(minutes)
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(existing_settings, f, ensure_ascii=False, indent=2)
            self.log(f"üíæ –ê–≤—Ç–æ-—Å–∞—É–Ω–¥—á–µ–∫: –∑–∞ {minutes} –º–∏–Ω—É—Ç –¥–æ –¥–∏—Å–∫–æ—Ç–µ–∫–∏")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ-—Å–∞—É–Ω–¥—á–µ–∫–∞: {e}")

    def run_soundcheck_and_notify(self):
        """–ó–∞–ø—É—Å–∫ —Å–∞—É–Ω–¥—á–µ–∫–∞ V2, —Ä–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        sc2 = SoundCheckV2()
        sc2.run_soundcheck()
        similarity = sc2.compare_with_previous()
        similarity = float(similarity) if similarity is not None else None
        verdict = None
        if similarity is not None:
            if similarity >= 90:
                verdict = '–°–∞—É–Ω–¥—á–µ–∫ ‚Äî –û–ö'
            else:
                verdict = '–ì—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å'
        image_path_new = os.path.join(get_exe_dir(), 'soundcheck_graph_v2.png')
        image_path_ref = os.path.join(get_exe_dir(), 'soundcheck_graph.png')
        sent = False
        if self.scheduler.telegram_bot and self.scheduler.telegram_bot.enabled and self.scheduler.telegram_bot.notifications_enabled:
            caption_lines = []
            if verdict:
                caption_lines.append(verdict)
            if similarity is not None:
                caption_lines.append(f"–°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f}%")
            caption = "\n".join(caption_lines) if caption_lines else '–°–∞—É–Ω–¥—á–µ–∫'
            try:
                paths = []
                if os.path.exists(image_path_ref):
                    paths.append(image_path_ref)
                if os.path.exists(image_path_new):
                    paths.append(image_path_new)
                if len(paths) >= 2:
                    sent = self.scheduler.telegram_bot.send_media_group(paths, caption=caption)
                elif len(paths) == 1:
                    sent = self.scheduler.telegram_bot.send_photo(paths[0], caption=caption)
                else:
                    sent = self.scheduler.telegram_bot.send_message(caption)
            except Exception as te:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {te}")
        return {
            'success': True,
            'similarity': similarity,
            'verdict': verdict,
            'telegram_sent': sent,
            'graph_paths': [p for p in [image_path_ref, image_path_new] if os.path.exists(p)]
        }
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API"""
        
        @self.app.route('/api/status', methods=['GET'])
        def get_status():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
            next_run = self.scheduler.get_next_run()
            
            return jsonify({
                'status': 'running',
                'current_time': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'scheduled_days': self.scheduler.scheduled_days,
                'start_time': f"{self.scheduler.start_time.hour:02d}:{self.scheduler.start_time.minute:02d}",
                'stop_time': f"{self.scheduler.stop_time.hour:02d}:{self.scheduler.stop_time.minute:02d}",
                'disco_is_active': self.scheduler.disco_is_active,
                'scheduler_enabled': self.scheduler.scheduler_enabled,
                'next_run': next_run
            })
        
        @self.app.route('/api/generate', methods=['POST'])
        def generate_playlist():
            try:
                success = self.scheduler.manual_generate_playlist()
                if success:
                    return jsonify({'success': True, 'message': '–ü–ª–µ–π–ª–∏—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'})
                else:
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/launch', methods=['POST'])
        def launch_vlc():
            try:
                success = self.scheduler.manual_launch_vlc()
                if success:
                    return jsonify({'success': True, 'message': 'VLC –∑–∞–ø—É—â–µ–Ω'})
                else:
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VLC'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/close', methods=['POST'])
        def close_vlc():
            try:
                success = self.scheduler.close_vlc(send_notification=False)
                if success:
                    return jsonify({'success': True, 'message': 'VLC –∑–∞–∫—Ä—ã—Ç'})
                else:
                    return jsonify({'success': False, 'message': '–ü—Ä–æ—Ü–µ—Å—Å—ã VLC –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/settings', methods=['GET'])
        def get_settings():
            settings = {
                'scheduled_days': self.scheduler.scheduled_days,
                'start_time': {
                    'hour': self.scheduler.start_time.hour,
                    'minute': self.scheduler.start_time.minute
                },
                'stop_time': {
                    'hour': self.scheduler.stop_time.hour,
                    'minute': self.scheduler.stop_time.minute
                },
                'playlist_duration_hours': self.scheduler.playlist_duration_hours,
                'scheduler_enabled': self.scheduler.scheduler_enabled
            }
            
            if self.audio_monitor:
                settings.update({
                    'audio_threshold': self.audio_monitor.threshold,
                    'audio_silence_duration': self.audio_monitor.silence_duration,
                    'audio_sound_confirmation_duration': self.audio_monitor.sound_confirmation_duration,
                    'audio_buffer_size': self.audio_monitor.buffer_size,
                    'audio_device_index': self.audio_monitor.device_index,
                    'monitoring_enabled': self.audio_monitor.monitoring_enabled
                })
            
            return jsonify(settings)
        
        @self.app.route('/api/settings', methods=['POST'])
        def update_settings():
            try:
                data = request.get_json()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                settings = {}
                
                if 'scheduled_days' in data:
                    settings['scheduled_days'] = data['scheduled_days']
                if 'start_time' in data:
                    settings['start_time'] = data['start_time']
                if 'stop_time' in data:
                    settings['stop_time'] = data['stop_time']
                if 'playlist_duration_hours' in data:
                    settings['playlist_duration_hours'] = data['playlist_duration_hours']
                if 'scheduler_enabled' in data:
                    settings['scheduler_enabled'] = data['scheduler_enabled']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.scheduler.save_settings(settings)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if self.audio_monitor:
                    audio_settings_updated = False
                    if 'audio_threshold' in data:
                        self.audio_monitor.threshold = data['audio_threshold']
                        audio_settings_updated = True
                    if 'audio_silence_duration' in data:
                        self.audio_monitor.silence_duration = data['audio_silence_duration']
                        audio_settings_updated = True
                    if 'audio_sound_confirmation_duration' in data:
                        self.audio_monitor.sound_confirmation_duration = data['audio_sound_confirmation_duration']
                        audio_settings_updated = True
                    if 'audio_buffer_size' in data:
                        self.audio_monitor.buffer_size = data['audio_buffer_size']
                        audio_settings_updated = True
                    if 'audio_device_index' in data:
                        self.audio_monitor.device_index = data['audio_device_index']
                        audio_settings_updated = True
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                    if audio_settings_updated:
                        self._save_audio_settings_to_config()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if 'monitoring_enabled' in data:
                        new_monitoring_enabled = data['monitoring_enabled']
                        current_enabled = self.audio_monitor.monitoring_enabled
                        
                        if new_monitoring_enabled != current_enabled:
                            # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            self.audio_monitor.monitoring_enabled = new_monitoring_enabled
                            
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                            if new_monitoring_enabled and not self.audio_monitor.is_monitoring:
                                self.audio_monitor.start_monitoring()
                                self.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ API")
                            elif not new_monitoring_enabled and self.audio_monitor.is_monitoring:
                                self.audio_monitor.stop_monitoring()
                                self.log("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥
                            self._save_monitoring_enabled_to_config(new_monitoring_enabled)
                
                return jsonify({'success': True, 'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/audio_status', methods=['GET'])
        def get_audio_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤—É–∫–∞"""
            try:
                if self.audio_monitor:
                    status = self.audio_monitor.get_lamp_status()
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º float32 –≤ –æ–±—ã—á–Ω—ã–π float –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    if 'audio_level' in status:
                        status['audio_level'] = float(status['audio_level'])
                    status['disco_is_active'] = self.scheduler.disco_is_active
                    return jsonify(status)
                else:
                    return jsonify({
                        'lamp_lit': False,
                        'audio_level': 0.0,
                        'monitoring_active': False,
                        'monitoring_enabled': False,
                        'disco_is_active': self.scheduler.disco_is_active
                    })
            except Exception as e:
                return jsonify({'error': str(e)})
        
        @self.app.route('/api/audio_devices', methods=['GET'])
        def api_get_audio_devices():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
            try:
                devices = get_audio_devices_list()
                return jsonify(devices)
            except Exception as e:
                return jsonify({'error': str(e)})
        
        @self.app.route('/api/scheduler/toggle', methods=['POST'])
        def toggle_scheduler():
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
            try:
                enabled = self.scheduler.toggle_scheduler()
                status = '–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'
                return jsonify({'success': True, 'message': f'–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ {status}', 'enabled': enabled})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/scheduler/status', methods=['GET'])
        def get_scheduler_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
            try:
                status = self.scheduler.get_status()
                return jsonify(status)
            except Exception as e:
                return jsonify({'error': str(e)})
        
        @self.app.route('/api/monitoring/toggle', methods=['POST'])
        def toggle_monitoring():
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤—É–∫–∞"""
            try:
                if self.audio_monitor:
                    enabled = self.audio_monitor.toggle_monitoring()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥
                    self._save_monitoring_enabled_to_config(enabled)
                    
                    # –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    if enabled and not self.audio_monitor.is_monitoring:
                        self.audio_monitor.start_monitoring()
                    
                    status = '–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'
                    return jsonify({'success': True, 'message': f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞ {status}', 'enabled': enabled})
                else:
                    return jsonify({'success': False, 'message': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/monitoring/status', methods=['GET'])
        def get_monitoring_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤—É–∫–∞"""
            try:
                if self.audio_monitor:
                    status = self.audio_monitor.get_lamp_status()
                    return jsonify(status)
                else:
                    return jsonify({'error': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'})
            except Exception as e:
                return jsonify({'error': str(e)})
        
        @self.app.route('/api/telegram/notifications/toggle', methods=['POST'])
        def toggle_telegram_notifications():
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
            try:
                if self.scheduler.telegram_bot:
                    enabled = self.scheduler.telegram_bot.toggle_notifications()
                    self.log(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
                    return jsonify({'success': True, 'enabled': enabled})
                else:
                    return jsonify({'success': False, 'message': 'Telegram bot not initialized'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/telegram/notifications/status', methods=['GET'])
        def get_telegram_notifications_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
            try:
                if self.scheduler.telegram_bot:
                    return jsonify({
                        'bot_enabled': self.scheduler.telegram_bot.enabled,
                        'notifications_enabled': self.scheduler.telegram_bot.notifications_enabled,
                        'chat_ids_count': len(self.scheduler.telegram_bot.chat_ids),
                        'status_text': self.scheduler.telegram_bot.get_notifications_status()
                    })
                else:
                    return jsonify({'error': 'Telegram bot not initialized'})
            except Exception as e:
                return jsonify({'error': str(e)})
        
        @self.app.route('/api/telegram/notifications/enable', methods=['POST'])
        def enable_telegram_notifications():
            """–í–∫–ª—é—á–µ–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
            try:
                if self.scheduler.telegram_bot:
                    success = self.scheduler.telegram_bot.enable_notifications()
                    if success:
                        self.log("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
                        return jsonify({'success': True, 'enabled': True})
                    else:
                        return jsonify({'success': False, 'message': 'Failed to enable notifications'})
                else:
                    return jsonify({'success': False, 'message': 'Telegram bot not initialized'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/telegram/notifications/disable', methods=['POST'])
        def disable_telegram_notifications():
            """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
            try:
                if self.scheduler.telegram_bot:
                    success = self.scheduler.telegram_bot.disable_notifications()
                    if success:
                        self.log("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                        return jsonify({'success': True, 'enabled': False})
                    else:
                        return jsonify({'success': False, 'message': 'Failed to disable notifications'})
                else:
                    return jsonify({'success': False, 'message': 'Telegram bot not initialized'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/current_track', methods=['GET'])
        def get_current_track():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ–º —Ç—Ä–µ–∫–µ"""
            try:
                track_info = self.scheduler.get_current_track_info()
                return jsonify(track_info)
            except Exception as e:
                return jsonify({'error': str(e)})
        
        @self.app.route('/api/track/next', methods=['POST'])
        def next_track():
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
            try:
                success = self.scheduler.next_track()
                if success:
                    return jsonify({'success': True, 'message': '–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫'})
                else:
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/track/previous', methods=['POST'])
        def previous_track():
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"""
            try:
                success = self.scheduler.previous_track()
                if success:
                    return jsonify({'success': True, 'message': '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫'})
                else:
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/track/play_pause', methods=['POST'])
        def play_pause_track():
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã"""
            try:
                success = self.scheduler.play_pause_track()
                if success:
                    return jsonify({'success': True, 'message': '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ø–∞—É–∑–∞'})
                else:
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/track/stop', methods=['POST'])
        def stop_track():
            """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
            try:
                success = self.scheduler.stop_track()
                if success:
                    return jsonify({'success': True, 'message': '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'})
                else:
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/volume', methods=['POST'])
        def set_volume():
            """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
            try:
                data = request.get_json()
                volume = data.get('volume', 100)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                if not isinstance(volume, (int, float)) or volume < 0 or volume > 320:
                    return jsonify({'success': False, 'message': '–ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 320'})
                
                success = self.scheduler.set_volume(int(volume))
                if success:
                    return jsonify({'success': True, 'message': f'–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {volume}%'})
                else:
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})

        @self.app.route('/api/soundcheck/reference', methods=['POST'])
        def api_soundcheck_reference():
            """–ó–∞–ø—É—Å–∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Å–∞—É–Ω–¥—á–µ–∫–∞ (—Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –∏ –≥—Ä–∞—Ñ–∏–∫)"""
            try:
                sc = SoundCheck()
                ok = sc.run_soundcheck()
                return jsonify({'success': bool(ok), 'message': '–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∞—É–Ω–¥—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω' if ok else '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∞—É–Ω–¥—á–µ–∫–∞'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})

        @self.app.route('/api/soundcheck', methods=['POST'])
        def api_soundcheck_run():
            """–ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∞—É–Ω–¥—á–µ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)"""
            try:
                result = self.run_soundcheck_and_notify()
                return jsonify(result)
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})

        @self.app.route('/api/soundcheck/schedule/toggle', methods=['POST'])
        def toggle_soundcheck_schedule():
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Å–∞—É–Ω–¥—á–µ–∫–∞"""
            try:
                self.soundcheck_schedule_enabled = not self.soundcheck_schedule_enabled
                self._save_soundcheck_schedule_enabled_to_config(self.soundcheck_schedule_enabled)
                status = '–≤–∫–ª—é—á–µ–Ω' if self.soundcheck_schedule_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'
                self.log(f"üîÅ –ê–≤—Ç–æ-—Å–∞—É–Ω–¥—á–µ–∫ {status}")
                return jsonify({'success': True, 'enabled': self.soundcheck_schedule_enabled})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/soundcheck/schedule/minutes', methods=['POST'])
        def update_soundcheck_minutes():
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω—É—Ç –¥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∞—É–Ω–¥—á–µ–∫–∞"""
            try:
                data = request.get_json()
                minutes = data.get('minutes', 30)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –º–∏–Ω—É—Ç
                if not isinstance(minutes, (int, float)) or minutes < 1 or minutes > 120:
                    return jsonify({'success': False, 'message': '–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 120'})
                
                self.soundcheck_minutes_before_disco = int(minutes)
                self._save_soundcheck_minutes_to_config(minutes)
                
                return jsonify({'success': True, 'minutes': minutes})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})

        @self.app.route('/api/soundcheck/schedule/status', methods=['GET'])
        def get_soundcheck_schedule_status():
            """–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Å–∞—É–Ω–¥—á–µ–∫–∞ –∏ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è"""
            try:
                next_info = self.scheduler.get_next_run()
                next_trigger = None
                if next_info and 'date' in next_info and 'time' in next_info:
                    try:
                        dt = datetime.strptime(f"{next_info['date']} {next_info['time']}", "%d.%m.%Y %H:%M")
                        trig = dt - timedelta(minutes=self.soundcheck_minutes_before_disco)
                        next_trigger = trig.strftime("%d.%m.%Y %H:%M")
                    except Exception:
                        next_trigger = None
                return jsonify({
                    'enabled': self.soundcheck_schedule_enabled,
                    'minutes_before_disco': self.soundcheck_minutes_before_disco,
                    'next_disco': next_info,
                    'next_trigger': next_trigger
                })
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/', methods=['GET'])
        def serve_web_interface():
            """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
            try:
                web_interface_path = os.path.join(get_exe_dir(), 'web_interface.html')
                self.log(f"üîç –ü–æ–∏—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {web_interface_path}")
                self.log(f"üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(web_interface_path)}")
                
                if os.path.exists(web_interface_path):
                    self.log("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Hello Kitty")
                    with open(web_interface_path, 'r', encoding='utf-8') as f:
                        return Response(f.read(), mimetype='text/html')
                else:
                    self.log("‚ö†Ô∏è –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback")
                    fallback_html = f"""
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –î–∏—Å–∫–æ—Ç–µ–∫–∏ –í–î–ù–•</title>
                        <meta charset="UTF-8">
                        <style>
                            body {{ font-family: Arial, sans-serif; margin: 40px; background: #ffb6c1; }}
                            h1 {{ color: #ff1493; }}
                            .info {{ background: white; padding: 20px; border-radius: 10px; margin: 20px 0; }}
                        </style>
                    </head>
                    <body>
                        <h1>üéµ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –î–∏—Å–∫–æ—Ç–µ–∫–∏ –í–î–ù–•</h1>
                        <div class="info">
                            <p><strong>–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!</strong></p>
                            <p>–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: <code>{web_interface_path}</code></p>
                            <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª web_interface.html –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.</p>
                            <p>API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: <a href="/api/status">/api/status</a></p>
                        </div>
                    </body>
                    </html>
                    """
                    return Response(fallback_html, mimetype='text/html', status=404)
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")
                return Response(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}", mimetype='text/plain', status=500)
    
    def run_scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        self.log("‚úÖ –¶–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                self.scheduler.check_schedule()
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞—É–Ω–¥—á–µ–∫ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞ –¥–∏—Å–∫–æ—Ç–µ–∫–∏
                if self.soundcheck_schedule_enabled:
                    next_info = self.scheduler.get_next_run()
                    if next_info and 'date' in next_info and 'time' in next_info:
                        try:
                            next_key = f"{next_info['date']} {next_info['time']}"
                            dt = datetime.strptime(next_key, "%d.%m.%Y %H:%M")
                            trigger_dt = dt - timedelta(minutes=self.soundcheck_minutes_before_disco)
                            now = datetime.now()
                            # –°—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ –Ω–∞ –æ–¥–Ω–æ –±–ª–∏–∂–∞–π—à–µ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
                            if now >= trigger_dt and (self.soundcheck_last_trigger_key != next_key):
                                self.log(f"üß™ –ê–≤—Ç–æ-—Å–∞—É–Ω–¥—á–µ–∫: –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞ {self.soundcheck_minutes_before_disco} –º–∏–Ω—É—Ç –¥–æ –¥–∏—Å–∫–æ—Ç–µ–∫–∏")
                                try:
                                    self.run_soundcheck_and_notify()
                                except Exception as se:
                                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∞—É–Ω–¥—á–µ–∫–∞: {se}")
                                # –ó–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –Ω–∞ —ç—Ç–æ—Ç –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                                self.soundcheck_last_trigger_key = next_key
                            # –ï—Å–ª–∏ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—à–ª–æ (–¥–∞–ª—å—à–µ —á–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á –ø—Ä–∏ —Å–º–µ–Ω–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                            if now > dt + timedelta(minutes=1):
                                # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ next_run —Å–Ω–æ–≤–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                                self.soundcheck_last_trigger_key = None
                        except Exception as pe:
                            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—Å–∞—É–Ω–¥—á–µ–∫–∞: {pe}")
                
                # –°–ø–∏–º —Å–µ–∫—É–Ω–¥—É
                time.sleep(1)
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(1)
    
    def run_flask_server(self):
        """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            server_ip = get_local_ip()
            self.log(f'üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://{server_ip}:5002')
            self.log(f'üéÄ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Hello Kitty: http://{server_ip}:5002/')
            self.log(f'üì° API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{server_ip}:5002/api/status')
            self.app.run(host='0.0.0.0', port=5002, debug=False, use_reloader=False)
        except Exception as e:
            self.log(f'‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {str(e)}')
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.log("=" * 60)
        self.log("üéµ –°–ï–†–í–ï–† –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –î–ò–°–ö–û–¢–ï–ö–ò –í–î–ù–•")
        self.log("=" * 60)
        self.log(f"üìÅ –ö–æ–Ω—Ñ–∏–≥: {self.config_file}")
        self.log(f"üìÖ –î–Ω–∏ –∑–∞–ø—É—Å–∫–∞: {self.scheduler.scheduled_days}")
        self.log(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.scheduler.start_time.strftime('%H:%M')}")
        self.log(f"‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {self.scheduler.stop_time.strftime('%H:%M')}")
        self.log(f"‚öôÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'–≤–∫–ª—é—á–µ–Ω' if self.scheduler.scheduler_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        if self.audio_monitor:
            self.log(f"üé§ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞: {'–≤–∫–ª—é—á–µ–Ω' if self.audio_monitor.monitoring_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        self.log("=" * 60)
        self.log("üéÄ –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° –í –°–¢–ò–õ–ï HELLO KITTY –î–û–°–¢–£–ü–ï–ù! üéÄ")
        self.log("=" * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ Telegram
        if self.scheduler.telegram_bot and self.scheduler.telegram_bot.enabled and self.scheduler.telegram_bot.notifications_enabled:
            try:
                self.scheduler.telegram_bot.notify_server_started()
                self.log("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            except Exception as e:
                self.log(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = Thread(target=self.run_scheduler_loop, daemon=True)
        scheduler_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        self.run_flask_server()
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        self.running = False
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞
        if self.audio_monitor:
            self.audio_monitor.cleanup()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å (Flask –º–æ–∂–µ—Ç –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç–æ–∫)
        self.log("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...")
        os._exit(0)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server = DiscoServer()
    server.start()


if __name__ == '__main__':
    main()

